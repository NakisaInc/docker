version: '3'

# Must declare a named volume which is mapped to Hanelly container directory
# this is because the container directory is not empty and we don't want the host directory to overwrite it.
volumes:
  hanelly-data:

services:
  elasticsearch:
    image: elasticsearch:5.2.0
    environment:
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
    command: [ elasticsearch, -E, network.bind_host=0.0.0.0, -E, network.publish_host=elasticsearch, -E, cluster.name=elasticsearch, -E, script.inline=true, -E, script.stored=true, -E, script.max_compilations_per_minute=100000 ]
    # ensure data, logs and JVM working directory are persisted externally to container for data persistence and problem troubleshooting post crash
    # docker copies the contents of the host directories over to the container directory and overwrites it
    volumes:
        - ./es-data:/usr/share/elasticsearch/data
        - ./es-logs:/usr/share/elasticsearch/logs
        - ./es-JVM-workingDir:/usr/lib/jvm/java-8-openjdk-amd64/jre
  hanelly:
    image: nakisa/hanelly:3.0.0-snapshot
    volumes:
        - hanelly-data:/usr/local/tomcat/webapps/hanelly
        - ./agent:/usr/local/tomcat/agent/
    depends_on:
      - elasticsearch
      - hanelly-db
      - redis
    environment:
        CATALINA_OPTS: "-javaagent:/usr/local/tomcat/agent/jmx_prometheus_javaagent-0.8.jar=4000:/usr/local/tomcat/agent/tomcat.yml -Dsecurity.preventcsrf=true -Dnak.cookie.useHttpOnly=true -Dnak.cookie.useSecure=true -Dredis.host=redis -Ddynamic.embedded=false -Ddynamic.host=elasticsearch -Ddynamic.cluster=elasticsearch -Dcluster.standalone=false -Dcluster.discovery.file=WEB-INF/tcp.xml -Djgroups.bind_addr=hanelly -Djava.net.preferIPv4Stack=true -Xms2g -Xmx2g"
  hanelly-db:
    image: mysql:5.7
    # must figure out a way to set memory allocation for mySQL like we do for ES and Hanelly
    volumes:
        - ./mysql:/var/lib/mysql
    environment:
        MYSQL_ROOT_PASSWORD: hanelly
        MYSQL_DATABASE: hanelly
        MYSQL_USER: hanelly
        MYSQL_PASSWORD: hanelly
  db-monitor:
    image: prom/mysqld-exporter:v0.10.0
    # must figure out a way to set memory allocation for dmMonitor like we do for ES and Hanelly
    environment:
      DATA_SOURCE_NAME: "hanelly:hanelly@(hanelly-db:3306)/hanelly"
    depends_on:
      - hanelly-db
  cadvisor:
    image: google/cadvisor:v0.25.0
   # must figure out a way to set memory allocation for cAdvisor like we do for ES and Hanelly
     volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
  nginx:
    image: nginx:1.11.5
   # must figure out a way to set memory allocation for NGINX like we do for ES and Hanelly
     depends_on:
      - hanelly
    volumes:
      - ./nginx/:/etc/nginx/conf.d/external/
    ports:
      - "80:80"
      - "443:443"
    # possibly need 504 GW timeout config improvements:
    # https://asdqwe.net/blog/solutions-504-gateway-timeout-nginx/    
    command: /bin/bash -c "cat /etc/nginx/conf.d/external/site.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off; error_log /dev/stdout info;'"
  prometheus:
    image: prom/prometheus:v1.6.0
   # must figure out a way to set memory allocation for Prometheus like we do for ES and Hanelly
     volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana:4.2.0
   # must figure out a way to set memory allocation for Grafana like we do for ES and Hanelly
     volumes:
      - ./grafana-startup:/var/lib/nakisa
      - ./grafana:/var/lib/grafana
    environment:
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:/grafana"
      GF_SERVER_DOMAIN: "grafana"
    entrypoint: bash /var/lib/nakisa/setup.sh
  redis:
    image: redis:3.2.8
   # must figure out a way to set memory allocation for Redis like we do for ES and Hanelly
     volumes:
      - ./redis-data:/data
      - ./redis-logs:/var/logs/redis
      
# Add iDoc Listener
# Add Backup & Restore
# Add Queue

